<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="LiveDataExporter.Code.Live Data Panel" locale="">
  <web>LiveDataExporter.Code</web>
  <name>Live Data Panel</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WikiManager.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <originalMetadataAuthor>xwiki:XWiki.Admin</originalMetadataAuthor>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Live Data Panel</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>Code for the Live Data panel for the exporter.</content>
  <object>
    <name>LiveDataExporter.Code.Live Data Panel</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>2dc78691-1fad-413b-8cae-20c226389622</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('application-livedata-exporter-translation-keys', {
  prefix: 'livedata.exporter.',
  keys: [
    'menuName',
    'panelTitle',
    'startExportButton',
    'download'
  ]
});

require(['xwiki-l10n!application-livedata-exporter-translation-keys'], function (l10n) {
  class LiveDataExporterPanel {
    constructor(liveData) {
      this.id = 'exporterPanel';
      this.name = l10n['menuName'];
      this.title = l10n['panelTitle'];
      this.icon = 'download';
      this.container = document.createElement('div');
      this.component = 'LiveDataAdvancedPanelExtension';
      this.order = 5000;
      this.liveData = liveData;

      const exportLink = document.createElement('a');
      exportLink.href = '#';
      exportLink.classList.add('button');
      exportLink.addEventListener('click', (e) =&gt; {
        this.startExport();
        e.preventDefault();
      });
      exportLink.textContent = l10n['startExportButton'];
      const exportLinkWrapper = document.createElement('span');
      exportLinkWrapper.classList.add('buttonwrapper');
      exportLinkWrapper.appendChild(exportLink);
      this.container.appendChild(exportLinkWrapper);

      this.exportList = document.createElement('ul');
      this.exportList.classList.add('export-list');
      this.container.appendChild(this.exportList);

      // Load the job.css resource by requesting this page that sets the appropriate header.
      const documentReference = XWiki.Model.resolve('LiveDataExporter.Code.JobCSS', XWiki.EntityType.DOCUMENT);
      const serviceURL = new XWiki.Document(documentReference).getURL('get');
      fetch(serviceURL);
    }

    delay(ms) {
      return new Promise(resolve =&gt; setTimeout(resolve, ms));
    }

    updateStatus(statusContainer, status) {
      console.log(status);
      let progressBar = statusContainer.querySelector('.ui-progress-bar');
      const offset = status.progress?.offset || 0;
      progressBar.style.width = `${offset * 100}%`;

      let messageContainer = statusContainer.querySelector('.ui-progress-message');
      const logEvents = status.log?.logEvents;
      if (logEvents &amp;&amp; logEvents.length &gt; 0) {
        const logMessage = logEvents[logEvents.length - 1]?.formattedMessage;
        if (logMessage) {
          messageContainer.textContent = logMessage;
        }
      }

      if (status.state === 'FINISHED') {
         const downloadLink = document.createElement('a');
         downloadLink.textContent = l10n['download'];
         downloadLink.href = `${XWiki.contextPath}/rest/liveData/export/csv?jobId=${encodeURIComponent(status.id)}`;
         statusContainer.appendChild(downloadLink);
      }
    }

    startExport() {
      const requestURL = `${XWiki.contextPath}/rest/liveData/export/csv?namespace=wiki:${encodeURIComponent(XWiki.currentWiki)}`;
      const headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      };

      fetch(requestURL, {
        method: 'POST',
        headers: headers,
        // Send everything except the data to avoid exposing the data in the request which is not fully private.
        body: JSON.stringify({meta: this.liveData.data.meta, query: this.liveData.data.query, id: this.liveData.data.id, data: {count: this.liveData.data.data.count}})
      }).then(async rawResponse =&gt; {
        const initialStatus = await rawResponse.json()
        const statusContainer = document.createElement('li');
        statusContainer.classList.add('ui-progress');
        statusContainer.innerHTML = '&lt;div class="ui-progress-background"&gt;\n' +
          '&lt;div class="ui-progress-bar green" style="width: 0;"&gt;&lt;/div&gt;&lt;/div&gt;\n' +
          '&lt;p class="ui-progress-message"&gt;&lt;/p&gt;';
        this.exportList.appendChild(statusContainer);
        this.updateStatus(statusContainer, initialStatus);

        let statusURL = initialStatus.links.find(link =&gt; link.rel === 'self')?.href;
        if (statusURL) {
          statusURL += "?log=true";
          let status = initialStatus;
          // Small initial delay to quickly fetch the log and potentially the job is very fast and thus finished already.
          await this.delay(50);
          while (statusURL &amp;&amp; (status.state === 'NONE' || status.state === 'RUNNING')) {
            const statusResponse = await fetch(statusURL, {headers: {'Accept': 'application/json'}});
            status = await statusResponse.json();
            this.updateStatus(statusContainer, status);
            await this.delay(1000);
          }
        }
      });
    }
  }

  document.addEventListener('xwiki:livedata:instanceCreated', function(e) {
    e.detail.livedata.registerPanel(new LiveDataExporterPanel(e.detail.livedata));
  });
});
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
</xwikidoc>
